# -*- coding: cp936 -*-
from __future__ import print_function # Python 2/3 compatibility
import boto3
import json
import decimal
import urllib2
import random
import array


def CallAPI():
    return

def ScanUberRequire(AMPMOther):
    tableUberRequire = dynamodb.Table('UberRequire')
    ResponseUberRequire = tableUberRequire.scan()

    for item in ResponseUberRequire['Items']:
        CallAPI()


    while 'LastEvaluatedKey' in ResponseUberRequire:
        ResponseUberRequire = tableUberRequire.scan(
            ExclusiveStartKey=ResponseUberRequire['LastEvaluatedKey']
            )

        for item in ResponseUberRequire['Items']:
            CallAPI()
    return

def CheckTime(timeCurrent, timeForCalling, AMPMOther, tableNextDate):
    # test below finds out that the Date function in AWS lambda is very poor
    # doesn't support date string like "2016-12-14T18:21:29-07:00"
    y1 = int(timeCurrent[0:4])
    mon1 = int(timeCurrent[5:7])
    d1 = int(timeCurrent[8:10])
    h1 = int(timeCurrent[11:13])
    min1 = int(timeCurrent[14:16])

    y2 = int(timeForCalling[0:4])
    mon2 = int(timeForCalling[5:7])
    d2 = int(timeForCalling[8:10])
    h2 = int(timeForCalling[11:13])
    min2 = int(timeForCalling[14:16])

    dateDict = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}
    if y2 % 400 == 0 or y2 % 100 == 0 or y2 % 4 == 0:
        dateDict[2] = 29

    otherHour = array('i', [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22])
    
    # for simplicity, we restict our date to be within UTC-7, PDT timezone, 01:00 AM to 11:00 PM
    # other wise, we need to consider carry in year, month, .....
    if y1 == y2 and mon1 == mon2 and d1 == d2 :
        if (h1 * 60 + min1 > h2 * 60 + min2) and ((h1 * 60 + min1 - h2 * 60 - min2) < 20) :
            print ("Time " + timeCurrent + " is within 20 mins " + timeForCalling)
            min3 = random.randint(1, 59)
            if AMPMOther == 'AM':
                h3 = random.randint(7, 9)
            if AMPMOther == 'AM':
                h3 = random.randint(16, 18)
            if AMPMOther == 'other':
                h3 = otherHour[random.randint(0, len(otherHour))]
            d3 = d2 + 1
            mon3 = mon2
            y3 = y2
            if d3 > dateDict[mon2]:
                d3 = 1
                mon3 = mon2 + 1
            if mon3 > 12:
                mon3 = 1
                y3 = y2 + 1
            newDateTime = (str(y3) + '-' + str(mon3) + '-' + str(d3) + 'T' + str(h3) + ':' +
                            str(min3) + timeCurrent[16:]
                           )
            print ('New Date Time for ' + AMPMOther + ' is ' + newDateTime)
            tableNextDate.update_item(
                Key={
                    'DateTime': AMPMOther
                },
                UpdateExpression="set PDTDateForAPI = :r",
                ExpressionAttributeValues={
                    ':r': newDateTime
                }
            )
            return
    
    print ("Time " + timeCurrent + " is not within 20 mins " + timeForCalling)
    return


dynamodb = boto3resource('dynamodb', region_name='us-west-2', endpoint_url="https://dynamodb.us-west-2.amazonaws.com")

timePDT = urllib2.urlopen('http://www.timeapi.org/PDT/now').read()

tableNextDate = dynamodb.Table('NextDateForCallingGoogleAPI')
ResponseNextDate = tableNextDate.scan()

for item in ResponseNextDate['Items']:
    ampmother = item['DateTime']
    CheckTime(timePDT, item['PDTDateForAPI'], ampmother, tableNextDate)

while 'LastEvaluatedKey' in ResponseNextDate:
    ResponseNextDate = tableNextDate.scan(
        ExclusiveStartKey=ResponseNextDate['LastEvaluatedKey']
        )

    for item in ResponseNextDate['Items']:
        ampmother = item['DateTime']
        CheckTime(timePDT, item['PDTDateForAPI'],ampmother, tableNextDate)



    

    
    

